@startuml analysis

class Connect4 {
    
    + constructor()
    + playGames()
}
Connect4 *--> Board
Connect4 *--> Turn
Connect4 *--> BoardView
Connect4 *--> TurnView
Connect4 ..> ResumeView
Connect4 ..> Message

class YesNoDialog #LightYellow {
    - {static} AFFIRMATIVE
    - {static} NEGATIVE
    - answer

    + constructor()
    + read(question)
    + isAffirmative()
    - isNegative()
    - getAnswer()
}
YesNoDialog ..> ConsoleMPDS
YesNoDialog ..> assert

class TurnView #LightYellow {

    + constructor(turn)    
    + play()
    + readGameMode()
    + writeResult()    
}
TurnView --> Turn
TurnView ..> PlayerView
TurnView ..> Error
TurnView ..> ErrorView
TurnView ..> Message
TurnView ..> ConsoleMPDS
TurnView ..> assert

class PlayerView #LightYellow {

    + constructor(player)    
    + play()
    + visitUserPlayer(userPlayer)
    + visitRandomPlayer(randomPlayer)
    + writeWin()
}
PlayerVisitor <|.. PlayerView
PlayerView --> Player
PlayerView ..> UserPlayer
PlayerView ..> RandomPlayer
PlayerView ..> Error
PlayerView ..> ErrorView
PlayerView ..> Message
PlayerView ..> ConsoleMPDS
PlayerView ..> assert

class ErrorView #LightYellow {
    - {static} MESSAGES

    + constructor(error)
    + writeln()
}
ErrorView --> Error
ErrorView ..> Message
ErrorView ..> ClosedInterval
ErrorView ..> assert

class ResumeView #LightYellow {

    + constructor(board, turn)
    + read()
    + isResume()
}
ResumeView *--> YesNoDialog
ResumeView --> Board
ResumeView --> Turn
ResumeView ..> Message
ResumeView ..> assert

class Message #LightYellow {
    {static} MESSAGES
    - msg

    - constructor(msg)
    + write()
    + writeln()
    + toString()
}
Message ..> Turn
Message ..> Coordinate
Message ..> ConsoleMPDS

class ConsoleMPDS #LightYellow 

class BoardView #LightYellow {
    - {static} CHARS_PER_CELL    

    + constructor(board)
    - {static} writeHorizontal()
    + write()    
    - writeCell()
    - {static} isMiddleCell(index)
}
BoardView --> Board
BoardView ..> Coordinate
BoardView ..> Color
BoardView ..> Message
BoardView ..> ConsoleMPDS
BoardView ..> assert



class GameView #LightYellow {

    + GameView(game)
    + play()
}
GameView --> Game
GameView *--> BoardView
GameView *--> TurnView
GameView ..> Message



class ColorView #LightYellow {
    - COLOR_LENGTH

    + ColorView(colorLength)
    + write(color)
    - isMiddle(index)
}
ColorView ..> Color



class SettingView #LightYellow {

    + SettingView(turn)
    + readGameMode()
    - getNumUsers()
}
SettingView --> Turn
SettingView ..> Message
SettingView ..> ClosedInterval
SettingView ..> UserView
SettingView ..> RandomView



class UserView #LightYellow {

    + UserView(player)
    + readColumn()
}
PlayerView <|-- UserView
UserView ..> Coordinate

class RandomView #LightYellow {

    + UserView(player)
    + readColumn()
}
PlayerView <|-- RandomView
RandomView ..> Coordinate



class Game #LightCyan {

    + Game()
    + isFinished()
    + changeTurn()
    + reset()
    + getBoard()
    + getTurn()
}
Game *--> Board
Game *--> Turn

class Turn #LightCyan {
    + {static} NUMBER_PLAYERS
    - activePlayer

    + Turn(board)
    + reset()
    + isWinner()
    + change()   
    + getPlayer(ordinal)
    + getIndex()
}
Turn *--> "NUMBER_PLAYERS" Player
Turn ..> Color

class Player #LightCyan {

    + Player(color, board)
    + dropToken(column)
    + isComplete(column)
    + isWinner()
    + toString()
}
Player --> Color
Player --> Board

class Board #LightCyan {

    + Board()
    + reset()
    + dropToken(column, color)
    + isComplete(column)
    - isEmpty(coordinate)
    + getColor(coordinate)
    + isWinner(color)
    - isConnect4(line)
}
Board *--> Coordinate : lastDrop
Board *--> "NUMBER_ROWS * NUMBER_COLUMNS" Color
Board ..> Vector
Board ..> Line

class Line #LightCyan {
    + {static} WIN_LENGTH

    + Line(origin, vector)
    + shiftedToOpposite()
    + getCoordinates()
    + isValid()
}
Line --> Coordinate : origin
Line --> Vector

class Vector #LightCyan {
    + {static} NORTH
    + {static} EAST
    + {static} NORTH_EAST
    + {static} SOUTH_EAST

    + Vector(row, column)
    + opposited()
    + toCoordinate()
}
Vector *--> Coordinate

class Coordinate #LightCyan {
    + {static} NUMBER_ROWS
    + {static} NUMBER_COLUMNS
    - row
    - column

    + Coordinate(row, column)
    + {static} getRandomColumn()
    - {static} isRowValid(row)
    + {static} isColumnValid(column)
    + isValid()
    + shifted(coordinate)
    + opposited()
    + getRow()
    + getColumn()
}
Coordinate ..> ClosedInterval

enum Color #LightCyan {
    RED
    YELLOW
    NULL
    - string

    + {static} get(ordinal)
    - {static} values()
    + isNull()
    + toString()
}
Color ..> ClosedInterval

class ClosedInterval #LightSteelBlue {
    - min
    - max

    + ClosedInterval(min, max)
    + isIncluded(value)
}

@enduml
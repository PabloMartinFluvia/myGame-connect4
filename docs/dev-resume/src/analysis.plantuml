@startuml analysis

class Connect4 {
    
    + Connect4()
    + playGames()
    - playGame()
    - isFinished()
    - isResumed()
    - reset()
}
Connect4 *--> Board
Connect4 *--> Turn
Connect4 *--> BoardView
Connect4 *--> TurnView
Connect4 ..> Message
Connect4 ..> YesNoDialog

class YesNoDialog #Pink {
    - {static} AFFIRMATIVE
    - {static} NEGATIVE
    - {static} SUFIX
    - {static} ERROR
    - answer

    + YesNoDialog()
    + read(question)
    + isAffirmative()
    - isNegative()
    - getAnswer()
}

class BoardView #LightYellow {
    - {static} COLUMN_LENGTH    

    + BoardView(board)
    + write()
    - {static} writeHorizontal()
}
BoardView --> Board
BoardView *--> ColorView
BoardView ..> Coordinate
BoardView ..> Message
BoardView ..> Color

class ColorView #LightYellow {
    - COLOR_LENGTH

    + ColorView(colorLength)
    + write(color)
    - isMiddle(index)
}
ColorView ..> Color

class TurnView #LightYellow {

    + TurnView(turn, board)
    + play()
    + writeResult()
}
TurnView --> Turn
TurnView ..> PlayerView
TurnView ..> Player
TurnView ..> Message

class PlayerView #LightYellow {

    + PlayerView(player)    
    + dropToken()
    + writeWin()
}
PlayerView --> Player
PlayerView ..> Message
PlayerView ..> Coordinate

enum Message #LightYellow {
    MANY MESSAGES
    - string

    + write()
    + writeln()
    + toString()
}
Message ..> Color

class Turn #LightCyan {
    + {static} NUMBER_PLAYERS
    - activePlayer

    + Turn(board)
    + reset()
    + isWinner()
    + change()   
    + getPlayer() 
}
Turn *--> "NUMBER_PLAYERS" Player
Turn ..> Color

class Player #LightCyan {

    + Player(color, board)
    + dropToken(column)
    + isComplete(column)
    + isWinner()
    + toString()
}
Player --> Color
Player --> Board

class Board #LightCyan {

    + Board()
    + reset()
    + dropToken(column, color)
    + isComplete(column)
    - isEmpty(coordinate)
    + getColor(coordinate)
    + isWinner(color)
    - isConnect4(line)
}
Board *--> Coordinate : lastDrop
Board *--> "NUMBER_ROWS * NUMBER_COLUMNS" Color
Board ..> Vector
Board ..> Line

class Line #LightCyan {
    + {static} WIN_LENGTH

    + Line(origin, vector)
    + shiftToOpposite()
    + getCoordinates()
    + isValid()
}
Line --> Coordinate
Line --> Vector

class Vector #LightCyan {
    + {static} NORTH
    + {static} EAST
    + {static} NORTH_EAST
    + {static} SOUTH_EAST

    + Vector(row, column)
    + opposited()
    + toCoordinate()
}
Vector *--> Coordinate

class Coordinate #LightCyan {
    + {static} NUMBER_ROWS
    + {static} NUMBER_COLUMNS
    - row
    - column

    + Coordinate(row, column)
    - {static} isRowValid(row)
    + {static} isColumnValid(column)
    + isValid()
    + shifted(coordinate)
    + opposited()
    + getRow()
    + getColumn()
}
Coordinate ..> ClosedInterval

enum Color #LightCyan {
    RED
    YELLOW
    NULL
    - string

    + {static} get(ordinal)
    - {static} values()
    + isNull()
    + toString()
}

class ClosedInterval #LightSteelBlue {
    - min
    - max

    + ClosedInterval(min, max)
    + isIncluded(value)
}

@enduml
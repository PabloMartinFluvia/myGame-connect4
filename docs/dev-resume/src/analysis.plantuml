@startuml analysis

class Connect4 {

    + Connect4()
    + play()
}
Connect4 *-down-> Game
Connect4 *-down-> GameView
Connect4 *-down-> YesNoDialog

class YesNoDialog #LightGreen {          
    + answer    

    + YesNoDialog()
    + ask()
    + isAffirmative()
}
YesNoDialog ..> Messages

class GameView #LightGreen {
    + GameView(game)
    + play()
}
GameView -right-> Game
GameView *-down-> PlayerView
GameView *-down-> BoardView
GameView ..> Messages

class PlayerView #LightGreen {
    + PlayerView(game)
    + readToken()
    + end()
}
PlayerView -right-> Game
PlayerView ..> Player
PlayerView *-down-> LimitedIntDialog : columnDialog
PlayerView ..> Messages

class BoardView #LightGreen {
    + VERTICAL
    + HORIZONTAL
    + CHARS_IN_CELL_PATTERN

    + BoardView(game)
    + show()
}
BoardView --> Board
BoardView ..> Game
BoardView ..> Coordinate

class Game #Wheat{  

    + Game()
    + reset()   
    + changeTurn()
    + getPlayer()    
    + isColumnFull(column)   
    + getColumnDimension()     
    + getBoard()            
}
Game *-down-> Turn
Game *-down-> Board
Game ..> Player

class Turn #Wheat{
    + index

    + Turn(players)  
    + getPlayer()  
    + change()   
    + reset() 
}
Turn --> "tokens.length" Player

class Player #Wheat{
    + token

    + Player(token, board)
    + placeToken(column)
    + isWinner()
    + toString()
}
Player --> Board

class Board #Wheat{    
    + WIN_COUNT = 4
    + tokens
    + tokensCoordinates
    
    + Board(tokens)
    + isColumnFull(column)
    + placeToken(token, column)
    + isWinner(token)  
    + getToken(coordinate) 
    + getRowDimension()
    + getColumnDimension()
    + reset()    
}
Board ..> IntervalClosed
Board ..> Coordinate
Board ..> Direction

class Direction #LightGray{
    + rowShift
    + columnShift

    + Direction(rowShift, columnShift)
    + inverse()
    + getRowShift()
    + getColumnShift()
}

class Coordinate #LightGray{
    + row
    + column 

    + Coordinate(row, column)
    + shift(direction)
    + getRange(direction, count)
    + equals(other)   
    + getRow()
    + getColumn()
}
Coordinate ..> Direction





enum Messages

class LimitedIntDialog #LightGreen {    
    + initLimitedIntDialog(max, min = 1) 
    + ask(msg)
}
LimitedIntDialog *-down-> IntervalClosed : limits
LimitedIntDialog ..> Messages

class IntervalClosed #LightGray{
    + max
    + min

    + IntervalClosed(max, min = 0)
    + includes(value)
    + toString()
}

@enduml
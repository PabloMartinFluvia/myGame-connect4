@startuml analysis

class Connect4 {

    + initConnect4()
    + play()
}
Connect4 *--> YesNoDialog
Connect4 ..> Game

class Game {     

    + initGame()
    + play()
}
Game *--> Turn
Game *--> Board

class Turn {
    - turnValue

    + initTurn(numPlayers, board)    
    + change()      
    + playerPlaceToken()        
    + isPlayerWinner()
    + showPlayerWin()
}
Turn *--> "numPlayers" Color : playersColors
Turn *--> LimitedIntDialog : columnDialog
Turn --> Board

class Board {
    - ROWS = 6
    - COLUMNS = 7
    
    + initBoard(numPlayers)
    + isColumnFull(column)
    + placeToken(column, color)
    + isWinner(color)
    + show()
    + getColumnsCount()
}
Board *--> "0..ROWS x COLUMNS" Coordinate : playersPlaceds
Board ..> ClosedInterval
Board ..> Direction
Board ..> Color

class Coordinate {
    + initCoordinate(row, column)
    + shift(direction, forward)
    + equals(other)   
    + getRow()
    + getColumn()     
}
Coordinate ..> Direction

enum Direction {
    VERTICAL
    HORIZONTAL
    DIAGONAL
    INVERSE_DIAGONAL

    + {static} values()
    + shiftRow(row, forward)
    + shiftColumn(column, forward)
}

enum Color {
    + X
    + O   
    + NONE 

    + {static} get(ordinal) : Color  
    + {static} values()  
    + ordinal()
    + isNone()
    + toString()
}

class YesNoDialog #LightGreen {  
    - question
    - answer   
    - YES
    - NO

    + initYesNoDialog(question)
    + ask()
    + isAffirmative()
}

class LimitedIntDialog #LightGreen {
    - requested
    - prefix
    

    + initLimitedIntDialog(requested, max, min = 1, prefix = "") 
    + ask()
    + setPrefix(prefix)
}
LimitedIntDialog *--> ClosedInterval : limits

class ClosedInterval {
    - max
    - min

    + initClosedInterval(max, min)
    + includes(value)
    + toString()
}


@enduml
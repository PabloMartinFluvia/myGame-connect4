@startuml analysis

'' app

class Connect4 {
    
    + constructor()
    + playGames()
}
Connect4 *--> Board
Connect4 *--> Turn
Connect4 *--> BoardView
Connect4 *--> TurnView
Connect4 ..> ResumeView
Connect4 ..> Message

'' views

class YesNoDialog #LightYellow {
    - {static} AFFIRMATIVE
    - {static} NEGATIVE
    - answer

    + constructor()
    + read(question)
    + isAffirmative()
    - isNegative()
    - getAnswer()
}
YesNoDialog ..> ConsoleMPDS

class TurnView #LightYellow {

    + constructor(turn)    
    + play()
    + readGameMode()
    + writeResult()    
}
TurnView --> Turn
TurnView ..> PlayerView
TurnView ..> Error
TurnView ..> ErrorView
TurnView ..> Message
TurnView ..> ConsoleMPDS

class PlayerView #LightYellow {

    + constructor(player)    
    + play()
    + visitUserPlayer(userPlayer)
    + visitRandomPlayer(randomPlayer)
    + writeWin()
}
PlayerVisitor <|.up. PlayerView
PlayerView --> Player
PlayerView ..> Error
PlayerView ..> ErrorView
PlayerView ..> Message
PlayerView ..> ConsoleMPDS

class ErrorView #LightYellow {
    - {static} MESSAGES

    + constructor(error)
    + writeln()
}
ErrorView --> Error
ErrorView ..> Message
ErrorView ..> ClosedInterval

class ResumeView #LightYellow {

    + constructor(board, turn)
    + read()
    + isResume()
}
ResumeView *--> YesNoDialog
ResumeView --> Board
ResumeView --> Turn
ResumeView ..> Message

enum Message #LightYellow {
    + MESSAGES
    - msg

    - constructor(msg)
    + write()
    + writeln()
    + toString()
}
Message ..> Turn
Message ..> Coordinate
Message ..> ConsoleMPDS

class ConsoleMPDS #LightYellow 

class BoardView #LightYellow {
    - {static} CHARS_PER_CELL    

    + constructor(board)
    - {static} writeHorizontal()
    + write()    
    - writeCell()
    - {static} isMiddleCell(index)
}
BoardView --> Board
BoardView ..> Coordinate
BoardView ..> Color
BoardView ..> Message
BoardView ..> ConsoleMPDS


'' utils

class ClosedInterval #LightSteelBlue {
    - min
    - max

    + constructor(min, max)
    + isIncluded(value)
}

'' models

abstract class Player #LightCyan {

    + constructor(color, board)
    + {abstract} accept(visitor)
    + dropToken(column)    
    # isComplete(column)    
    + getName()    
}
Player --> Color
Player --> Board
Player ..> PlayerVisitor

class UserPlayer #LightCyan {

    + constructor(color, board)
    + accept(visitor)
    + getErrorColumn(column)
}
Player <|-- UserPlayer
UserPlayer ..> Coordinate
UserPlayer ..> Error

class RandomPlayer #LightCyan {

    + constructor(color, board)
    + accept(visitor)
    + getRandomColumn()
}
Player <|-- RandomPlayer
RandomPlayer ..> Coordinate

interface PlayerVisitor #LightCyan {

    + visitUserPlayer(userPlayer)
    + visitRandomPlayer(randomPlayer)
}
PlayerVisitor ..> UserPlayer
PlayerVisitor ..> RandomPlayer

class Turn #LightCyan {
    + {static} NUMBER_PLAYERS
    - activePlayer

    + Turn(board)
    + reset()
    + isWinner()
    + change()   
    + getPlayer(ordinal)
    + getIndex()
}
Turn *--> "NUMBER_PLAYERS" Player
Turn --> Board
Turn ..> UserPlayer : <new>
Turn ..> RandomPlayer : <new>
Turn ..> Color
Turn ..> Error
Turn ..> ClosedInterval

enum Error #LightCyan {
    + INVALID_GAME_MODE
    + INVALID_COLUMN
    + COMPLETED_COLUMN
    - code

    + isNull()
    + getCode()
}

class Coordinate #LightCyan {
    + {static} NUMBER_ROWS
    + {static} NUMBER_COLUMNS
    - row
    - column

    + constructor(row, column)
    - {static} isRowValid(row)
    + {static} isColumnValid(column)
    + isValid()
    + shifted(coordinate)
    + opposited()
    + getRow()
    + getColumn()
    + equals(other)
}
Coordinate ..> ClosedInterval

enum Color #LightCyan {
    RED
    YELLOW
    NULL
    - name

    + {static} get(ordinal)
    - {static} values()
    + isNull()
    + getName()
}
Color ..> ClosedInterval

enum Shiftment #LightCyan {
    + NORTH
    + EAST
    + NORTH_EAST
    + SOUTH_EAST

    + shift(coordinate)
    + oppositeShift(coordinate)
}
Shiftment *--> Coordinate


class Board #LightCyan {
    - {static} WIN_COUNT

    + constructor()
    + reset()
    + isComplete(column)
    - isEmpty(coordinate)
    + getColor(coordinate)
    + dropToken(column, color)        
    + hasWinner()
    - initCandidates()
    - isConnect4(candidates)
}
Board --> "0 .. ROWS * COLUMNS" Color
Board *--> Coordinate : lastDrop
Board ..> Shiftment

@enduml
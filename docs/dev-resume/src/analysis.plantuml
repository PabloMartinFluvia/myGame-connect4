@startuml analysis

class Connect4 {

    + Connect4()
    + play()
}
Connect4 *-down-> Game
Connect4 *-down-> GameView
Connect4 *-down-> YesNoDialog

class YesNoDialog #LightGreen {      
    + question
    + answer  
    + YES
    + NO     

    + YesNoDialog(question)
    + ask()
    + isAffirmative()
}

class GameView #LightGreen {
    + GameView(game)
    + play()
}
GameView -right-> Game
GameView *-down-> PlayerView
GameView *-down-> BoardView

class Game #Wheat{  

    + Game()
    + countColumns()
    + isColumnFull(column)
    + placeToken(column)
    + isWinner() 
    + changeTurn()
    + getTurn()
    + getBoard()
    + reset()
}
Game *-down-> Turn
Game *-down-> Board
Game ..> Player

class Turn #Wheat{
    + index

    + Turn(players)  
    + getPlayer()  
    + change()   
    + reset() 
}
Turn -right-> "tokens.length" Player


class PlayerView #LightGreen {
    + PlayerView(game)
    + askColumn()
    + win()
}
PlayerView ..> Game
PlayerView -right-> Turn
PlayerView ..> Player
PlayerView *-down-> LimitedIntDialog : columnDialog

class LimitedIntDialog #LightGreen {
    + subject
    + actionTitle
    
    + initLimitedIntDialog(subject = "value", max, min = 1, actionTitle = "Introduce") 
    + ask()
    + setActionTitle(actionTitle)
}
LimitedIntDialog *-down-> IntervalClosed : limits

class IntervalClosed #LightGray{
    + max
    + min

    + IntervalClosed(max, min = 0)
    + includes(value)
    + toString()
}

class Player #Wheat{
    + token

    + Player(token, board)
    + placeToken(column)
    + isWinner()
    + toString()
}
Player -right-> Board

class Board #Wheat{
    + ROWS = 6
    + COLUMNS = 7
    + WIN_COUNT = 4
    + tokens
    + tokensCoordinates
    
    + Board(tokens)
    + isColumnFull(column)
    + placeToken(token, column)
    + isWinner(token)  
    + getToken(coordinate) 
    + countRows()
    + countColumns()
    + reset()    
}
Board ..> IntervalClosed
Board ..> Coordinate
Board ..> Direction

class Direction #LightGray{
    + rowShift
    + columnShift

    + Direction(rowShift, columnShift)
    + inverse()
    + getRowShift()
    + getColumnShift()
}

class Coordinate #LightGray{
    + row
    + column 

    + Coordinate(row, column)
    + shift(direction)
    + equals(other)   
    + getRow()
    + getColumn()
}
Coordinate ..> Direction

class BoardView #LightGreen {
    + VERTICAL
    + HORIZONTAL
    + CHARS_IN_CELL_PATTERN

    + BoardView(game)
    + show()
}
BoardView -right-> Board
BoardView ..> Game
BoardView ..> Coordinate

/'




















enum Color #Wheat{
    + X
    + O   
    + NONE 

    - initColor(value)
    + {static} get(ordinal) 
    + {static} values()  
    + ordinal()
    + isNone()
    + toString()
}
Color ..> ClosedInterval




'/

@enduml
@startuml analysis

class Connect4 {

    + initConnect4()
    + play()
}
Connect4 *--> Game
Connect4 *--> GameView
Connect4 *--> YesNoDialog

class YesNoDialog #LightGreen {  
    - question
    - answer   
    - YES
    - NO

    + initYesNoDialog(question)
    + ask()
    + isAffirmative()
}







class GameView #LightGreen {
    + initGameView(game)
    + play()
}
GameView --> Game
GameView *--> PlayerView
GameView *--> BoardView

class Game #Wheat{     

    + initGame()
    + placePlayerToken(column)
    + getColumnsCount()
    + isColumnFull(column)
    + isPlayerWinner()    
    + changeTurn()
    + getTurn()
    + getBoard()
    + reset()
}
Game *--> Turn
Game *--> Board

class PlayerView #LightGreen {
    + initTurnView(game)
    + askColumn()
    + showErrorFullColumn()
    + showWinner()
}
PlayerView --> Turn
PlayerView ..> Game
PlayerView *--> LimitedIntDialog : columnDialog

class Turn #Wheat{
    - turnValue

    + initTurn(board, numPlayers)  
    + getPlayerString()      
    + placePlayerToken(column)        
    + isPlayerWinner()
    + change()   
    + reset() 
}
Turn *--> "numPlayers" Color : playersColors
Turn --> Board

class BoardView #LightGreen {
    - CELL_CHARS_COUNT
    - ROW_SEPARATOR

    + initBoardView(game)
    + show()
}
BoardView --> Board
BoardView ..> Color
BoardView ..> Game

class Board #Wheat{
    - ROWS = 6
    - COLUMNS = 7
    - WIN_COUNT = 4
    
    + initBoard(numPlayers)
    + isColumnFull(column)
    + placeToken(column, color)
    + getColor(row, column)
    + isWinner(color)    
    + getRowsCount()
    + getColumnsCount()
    + reset()
}
Board *--> "numPlayers x (0..ROWS x COLUMNS) / numPlayers" Coordinate : playersCoordinates
Board ..> ClosedInterval
Board ..> Direction
Board ..> Color

class Coordinate #Wheat{
    - row
    - column 

    + initCoordinate(row, column)
    + shift(direction)
    + equals(other)   
    + getRow()
    + getColumn()
}
Coordinate ..> Direction

class ClosedInterval #Wheat{
    - max
    - min

    + initClosedInterval(max, min = 0)
    + includes(value)
    + toString()
}

class Direction #Wheat{
    + rowShift
    + columnShift

    + Direction(rowShift, columnShift)
    + inverse()
    + getRowShift()
    + getColumnShift()
}


enum Color #Wheat{
    + X
    + O   
    + NONE 

    - initColor(value)
    + {static} get(ordinal) 
    + {static} values()  
    + ordinal()
    + isNone()
    + toString()
}
Color ..> ClosedInterval



class LimitedIntDialog #LightGreen {
    - requested
    - prefix
    
    + initLimitedIntDialog(requested, max, min = 1, prefix = "") 
    + ask()
    + setPrefix(prefix)
}
LimitedIntDialog *--> ClosedInterval : limits

@enduml